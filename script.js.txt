document.addEventListener("DOMContentLoaded", () => {
    const pokemonImages = {
        "1": "bulbasaur.png",
        "2": "squirtle.png",
        "3": "pikachu.png",
        "4": "charizard.png",
        "5": "snorlax.png",
        "6": "professor_oak.png"
    };

    function updatePokemonImage(option) {
        const imgElement = document.getElementById("pokemon-img");
        imgElement.src = pokemonImages[option] || "";
        imgElement.style.display = option ? "block" : "none";
    }

    function calculate() {
        const option = document.getElementById("option").value;
        updatePokemonImage(option);
        let resultText = "";

        switch (option) {
            case "1": { // pH Reduction using Sulfuric Acid
                let alkalinity = parseFloat(prompt("Enter Alkalinity (mg/L as CaCO3):"));
                let acidDemand = alkalinity * 0.98;
                let totalAcidKg = (acidDemand * 100000) / 1000000;
                let volumeSulfuricAcid = totalAcidKg / (1.84 / 1000);
                resultText = `Sulfuric Acid Required: ${totalAcidKg.toFixed(2)} kg\nVolume of Sulfuric Acid (98%): ${volumeSulfuricAcid.toFixed(2)} L`;
                break;
            }
            case "2": { // pH Increase using Sodium Hydroxide
                let acidity = parseFloat(prompt("Enter Acidity (mg/L as CaCO3):"));
                let baseDemand = acidity * 0.8;
                let totalBaseKg = (baseDemand * 100000) / 1000000;
                let volumeSodiumHydroxide = totalBaseKg / (1.53 / 1000);
                resultText = `Sodium Hydroxide Required: ${totalBaseKg.toFixed(2)} kg\nVolume of Sodium Hydroxide (50%): ${volumeSodiumHydroxide.toFixed(2)} L`;
                break;
            }
            case "3": { // BOD Reduction using Alum
                let initialBOD = parseFloat(prompt("Enter Initial BOD (mg/L):"));
                let targetBOD = parseFloat(prompt("Enter Target BOD (mg/L):"));
                if (initialBOD <= targetBOD) {
                    resultText = "Target BOD is higher or equal to initial BOD. No alum is required.";
                } else {
                    let bodReduction = initialBOD - targetBOD;
                    let alumDosage = 10 * bodReduction / 100;
                    let totalAlumKg = (alumDosage * 100000) / 1000000;
                    let volumeAlumSolution = totalAlumKg / (1.1 / 1000);
                    resultText = `Alum Required: ${totalAlumKg.toFixed(2)} kg\nVolume of Alum Solution (10%): ${volumeAlumSolution.toFixed(2)} L`;
                }
                break;
            }
            case "4": { // COD Reduction using Potassium Permanganate
                let initialCOD = parseFloat(prompt("Enter Initial COD (mg/L):"));
                let targetCOD = parseFloat(prompt("Enter Target COD (mg/L):"));
                let codReduction = initialCOD - targetCOD;
                let potassiumPermanganateDosage = 5 * codReduction / 100;
                let totalKMnO4Kg = (potassiumPermanganateDosage * 100000) / 1000000;
                let volumeKMnO4Solid = totalKMnO4Kg / 2.7;
                resultText = `Potassium Permanganate Required: ${totalKMnO4Kg.toFixed(2)} kg\nVolume of Potassium Permanganate (solid): ${volumeKMnO4Solid.toFixed(2)} L`;
                break;
            }
            case "5": { // Distribute Treated Water to Reservoirs
                let numReservoirs = parseInt(prompt("How many reservoirs do you have?"));
                let reservoirs = [];
                for (let i = 0; i < numReservoirs; i++) {
                    let name = prompt(`Enter name of reservoir #${i + 1}:`);
                    let capacity = parseFloat(prompt("Enter capacity in liters:"));
                    let currentLevel = parseFloat(prompt("Enter current water level in liters:"));
                    reservoirs.push({ name, capacity, currentLevel });
                }
                let totalWater = parseFloat(prompt("Enter the amount of water treated (liters):"));
                let distributionResult = "\nDistributing treated water to reservoirs...\n";
                reservoirs.forEach(reservoir => {
                    let refillAmount = Math.min(totalWater, reservoir.capacity - reservoir.currentLevel);
                    reservoir.currentLevel += refillAmount;
                    totalWater -= refillAmount;
                    distributionResult += `- Reservoir: ${reservoir.name}, Current Level: ${reservoir.currentLevel.toFixed(2)} L\n`;
                });
                if (totalWater > 0) {
                    distributionResult += `- Excess treated water: ${totalWater.toFixed(2)} L. Consider other uses or storage options.`;
                }
                resultText = distributionResult;
                break;
            }
            case "6": { // Treatment Steps
                resultText = "1. Pretreatment: Removes large objects.\n2. Primary Treatment: Removes solids.\n3. Secondary Treatment: Removes organic matter.\n4. Disinfection: Kills bacteria.\n5. Effluent Release: Treated water is released.";
                break;
            }
            default:
                resultText = "Please select a valid option!";
        }

        document.getElementById("result").textContent = resultText;
    }

    document.getElementById("calculate").addEventListener("click", calculate);
});
